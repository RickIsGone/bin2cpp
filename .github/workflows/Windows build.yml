# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows build

on:
  push:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        build_type: [Release]
        c_compiler: [clang, cl]
        cpp_compiler: [clang++, cl]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S . -B build

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    # - name: Pack
    #   run: cpack -C ${{ steps.strings.outputs.build-output-dir }}
    - name: Get version from latest tag
      id: get_version
      shell: bash
      run: |
        git fetch --tags
        TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
    - name: Archive with 7z
      run: 7z a bin2cpp-windows-${{ steps.get_version.outputs.version }}.7z .\build\Release\bin2cpp.exe
    - name: Archive with zip
      run: powershell Compress-Archive -Path .\build\Release\bin2cpp.exe -DestinationPath bin2cpp-windows-${{ steps.get_version.outputs.version }}.zip
    - name: Archive with tar
      shell: bash
      run: tar -cvf bin2cpp-windows-${{ steps.get_version.outputs.version }}.tar -C build/Release bin2cpp.exe
    - name: Upload Windows 7z artifact
      uses: actions/upload-artifact@v4
      with:
        name: bin2cpp-windows-${{ steps.get_version.outputs.version }}.7z
        path: bin2cpp-windows-${{ steps.get_version.outputs.version }}.7z
    - name: Upload Windows zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: bin2cpp-windows-${{ steps.get_version.outputs.version }}.zip
        path: bin2cpp-windows-${{ steps.get_version.outputs.version }}.zip
    - name: Upload Windows tar artifact
      uses: actions/upload-artifact@v4
      with:
        name: bin2cpp-windows-${{ steps.get_version.outputs.version }}.tar
        path: bin2cpp-windows-${{ steps.get_version.outputs.version }}.tar
    
